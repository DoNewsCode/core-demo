// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7f187dc0cd
// Version Date: 2021-03-04T07:00:17Z

// Package grpc provides a gRPC client for the User service.
package grpc

import (
	"context"
	"google.golang.org/grpc"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/DoNewsCode/skeleton/app/proto"
	svc "github.com/DoNewsCode/skeleton/app/user/gen"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...grpctransport.ClientOption) (svc.Endpoints, error) {
	var loginEndpoint endpoint.Endpoint
	{
		loginEndpoint = grpctransport.NewClient(
			conn,
			"app.user.User",
			"Login",
			EncodeGRPCLoginRequest,
			DecodeGRPCLoginResponse,
			pb.UserInfoReply{},
			options...,
		).Endpoint()
	}

	return svc.Endpoints{
		LoginEndpoint: loginEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCLoginResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC login reply to a user-domain login response. Primarily useful in a client.
func DecodeGRPCLoginResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserInfoReply)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCLoginRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain login request to a gRPC login request. Primarily useful in a client.
func EncodeGRPCLoginRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UserLoginRequest)
	return req, nil
}
